name: maven_docker_ci.yml

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  # Allows manual runs from the GitHub Actions UI
  workflow_dispatch:

jobs:
  build_test_push:
    name: Build, Test, and Push Docker Image
    runs-on: ubuntu-latest

    # 2. SERVICE DEFINITION (Postgres 15)
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: volleyball_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres # Simple password for CI environment
        ports:
          - 5432:5432
        # Health check options (Using the optimized values from the last step)
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1. SETUP AND CHECKOUT
      - name: ðŸ”„ Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven # Cache Maven dependencies for faster builds

      # 3. ROBUST WAIT FOR DATABASE
      - name: Wait for PostgreSQL service to start
        id: wait_db
        # We need postgresql-client to use pg_isready
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          
          echo "Waiting for Postgres on localhost:5432 (up to 60s)..."
          
          for i in {1..60}; do
            # Check readiness: exit status 0 = ready
            pg_isready -h localhost -p 5432 -U postgres -d volleyball_db -q
            STATUS=$?
          
            if [ $STATUS -eq 0 ]; then
              echo "PostgreSQL ready on attempt $i"
              exit 0
            fi
            sleep 1
          done
          
          # DIAGNOSTICS ON TIMEOUT FAILURE
          echo "Postgres did not become ready in time. Printing container logs..." >&2
          CONTAINER=$(docker ps -a --filter ancestor=postgres:15 --format '{{.ID}}' | head -n1)
          if [ -n "$CONTAINER" ]; then
            echo "==== docker logs (last 500 lines) ===="
            docker logs --tail 500 "$CONTAINER" || true
          fi
          exit 1 # Fail the job

      # 4. BUILD AND TEST
      # Note: This assumes you have an application-test.properties file
      # configured to connect to localhost:5432/volleyball_db with user/pass 'postgres'.
      - name: Build and Test JAR
        run: mvn -B package -Dspring-boot.run.profiles=test --file pom.xml

      # 5. DOCKER BUILD AND PUSH (Continuous Delivery part)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/master' }} # Only push on 'master' branch
          tags: ${{ secrets.DOCKER_USERNAME }}/volleyball-stat-tracker:latest