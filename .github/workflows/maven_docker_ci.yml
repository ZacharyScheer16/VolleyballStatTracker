name: maven_docker_ci.yml
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build_test_push:
    name: Build, Test, and Push Docker Image
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: volleyball_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Ninjazach7!1
        ports:
          - 5432:5432
        # FIX APPLIED: Using '>-' to remove trailing newline
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: ðŸ”„Checkout Code
        uses: actions/checkout@v4

      - name:  Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # 1. ROBUST WAIT STEP
      - name: Wait for PostgreSQL to be reachable
        id: wait_db
        run: |
          # Install postgresql client utility for pg_isready
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          
          # Wait loop
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL ready"
              exit 0
            fi
            sleep 1
          done
          echo "Postgres did not come up" >&2
          exit 1

      # 2. DIAGNOSTIC STEP (Runs only if the wait step fails)
      - name: Debug Postgres container logs
        if: failure()
        run: |
          echo "==== docker ps -a ===="
          docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.Names}}\t{{.Status}}"

          # Find the Postgres container (using filter by image ancestor)
          CONTAINER=$(docker ps -a --filter ancestor=postgres:13 --format '{{.ID}}' | head -n1)
          
          if [ -n "$CONTAINER" ]; then
            echo "Found Postgres container: $CONTAINER"
            echo "==== docker logs (last 200 lines) ===="
            # The '|| true' ensures this command doesn't fail the step if logs fail
            docker logs --tail 200 "$CONTAINER" || true
          else
            echo "No postgres container found"
          fi

      # 3. BUILD & TEST STEP (Runs only if previous steps succeed)
      - name: Build and Test JAR
        run: mvn -B package -Dspring-boot.run.profiles=test --file pom.xml

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name:  Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/volleyball-stat-tracker
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      # 4. DOCKER BUILD & PUSH STEP
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}